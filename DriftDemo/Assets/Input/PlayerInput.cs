//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""GameplayActionMap"",
            ""id"": ""5ff1aefb-6a21-458d-88e9-67b43a3c3bae"",
            ""actions"": [
                {
                    ""name"": ""MotorControl"",
                    ""type"": ""Button"",
                    ""id"": ""45424c8a-642a-4225-8ef2-c4dc21b8dbb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Button"",
                    ""id"": ""46063cc2-e32c-4099-8fb6-75769a695c08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HandBrake"",
                    ""type"": ""Button"",
                    ""id"": ""b7184592-ae18-485e-abd7-f35715ca595b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Motor Control"",
                    ""id"": ""5a6048ea-539f-43c0-b90c-3dc1a72358be"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MotorControl"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d2f9f618-bf31-447a-b0b4-0fb2abd235c4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MotorControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ce49dc7c-56dc-4671-8ea9-3d41e6a6fc59"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MotorControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Steering"",
                    ""id"": ""88efffdf-eb25-4fdc-97ad-8ec54fbaceb8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7f61d63a-0bfd-4910-b098-2e7619880e1f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e75db2cf-5994-4af8-95ee-e35edd0886b5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3fc1363c-c6dc-440b-bd37-4bcf5b5e938f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandBrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayActionMap
        m_GameplayActionMap = asset.FindActionMap("GameplayActionMap", throwIfNotFound: true);
        m_GameplayActionMap_MotorControl = m_GameplayActionMap.FindAction("MotorControl", throwIfNotFound: true);
        m_GameplayActionMap_Steering = m_GameplayActionMap.FindAction("Steering", throwIfNotFound: true);
        m_GameplayActionMap_HandBrake = m_GameplayActionMap.FindAction("HandBrake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayActionMap
    private readonly InputActionMap m_GameplayActionMap;
    private List<IGameplayActionMapActions> m_GameplayActionMapActionsCallbackInterfaces = new List<IGameplayActionMapActions>();
    private readonly InputAction m_GameplayActionMap_MotorControl;
    private readonly InputAction m_GameplayActionMap_Steering;
    private readonly InputAction m_GameplayActionMap_HandBrake;
    public struct GameplayActionMapActions
    {
        private @PlayerInput m_Wrapper;
        public GameplayActionMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MotorControl => m_Wrapper.m_GameplayActionMap_MotorControl;
        public InputAction @Steering => m_Wrapper.m_GameplayActionMap_Steering;
        public InputAction @HandBrake => m_Wrapper.m_GameplayActionMap_HandBrake;
        public InputActionMap Get() { return m_Wrapper.m_GameplayActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces.Add(instance);
            @MotorControl.started += instance.OnMotorControl;
            @MotorControl.performed += instance.OnMotorControl;
            @MotorControl.canceled += instance.OnMotorControl;
            @Steering.started += instance.OnSteering;
            @Steering.performed += instance.OnSteering;
            @Steering.canceled += instance.OnSteering;
            @HandBrake.started += instance.OnHandBrake;
            @HandBrake.performed += instance.OnHandBrake;
            @HandBrake.canceled += instance.OnHandBrake;
        }

        private void UnregisterCallbacks(IGameplayActionMapActions instance)
        {
            @MotorControl.started -= instance.OnMotorControl;
            @MotorControl.performed -= instance.OnMotorControl;
            @MotorControl.canceled -= instance.OnMotorControl;
            @Steering.started -= instance.OnSteering;
            @Steering.performed -= instance.OnSteering;
            @Steering.canceled -= instance.OnSteering;
            @HandBrake.started -= instance.OnHandBrake;
            @HandBrake.performed -= instance.OnHandBrake;
            @HandBrake.canceled -= instance.OnHandBrake;
        }

        public void RemoveCallbacks(IGameplayActionMapActions instance)
        {
            if (m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActionMapActions @GameplayActionMap => new GameplayActionMapActions(this);
    public interface IGameplayActionMapActions
    {
        void OnMotorControl(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnHandBrake(InputAction.CallbackContext context);
    }
}
